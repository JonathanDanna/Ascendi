for objects, you can do collission detection the same way the ghost checks for it's boundaries.  
Create an empty object with no image, only attributes are an X and Y location and maybe size.
Check if the ghost is touching it by comparing it's position and the ghost's.  

this is an example loop of creating multiple, trackable instances of an object which can have colission detection done.  

for (i=0;i<score;i++){
    var goo[i] = {
           x: math.rand()*w; //randomly place the goo on the x axis
           y: (math.rand()*(wall.height+floor.height))*score; //wall.height+floor.height is the height of one level, multiply by the score gets us placement at different floors, randomized.
        };
    var couch[i] = {
            x: math.rand()*w;
            y: (math.rand()*(wall.height+floor.height))*score;
        };
    //colission detection
    if (
		ghost[i].x <= (couch[i].x + couchImg.width)
		&& couch[i].x <= (ghost[i].x + ghostImg.width)
		&& ghost[i].y <= (couch[i].y + couchImg.height)
		&& couch[i].y <= (ghost[i].y + ghostImg.height)
		) {
            //change ghost speed to normal decreasing, same as when theres no buttons pressed
            //in the goo's version, this space will instead start the goo counter and turn off colission for the ghost
		};
    
}

array which randomly selects an element 1-4

floor hole generation concept:

var floorSwitcher = Math.floor(Math.random()*4)
switch(floorSwitcher) with 4 cases, each case draws two images which makes a full floor with a gap in the middle.
each image in the case needs to have it's own empty variable like the ghost does so we can do colission checks.

case 1:
    draw image of block 1 at appropriate place
    draw image of blocks 3+4 at height of block 1 but y location is block 1 + width of gap